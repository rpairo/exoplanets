import XCTest
@testable import Data
@testable import Domain

final class ExoplanetRepositoryImplTests: XCTestCase {
    var repository: ExoplanetRepositoryImpl!
    
    override func setUp() {
        super.setUp()
        repository = ExoplanetRepositoryImpl(urlString: "https://example.com/exoplanets.json")
    }
    
    override func tearDown() {
        repository = nil
        super.tearDown()
    }
    
    func testFetchExoplanets_InvalidURL() async {
        // Dado una URL inválida
        repository = ExoplanetRepositoryImpl(urlString: "invalid_url")
        
        // Cuando
        let expectation = XCTestExpectation(description: "URL inválida debería fallar")
        repository.fetchExoplanets { result in
            switch result {
            case .success(_):
                XCTFail("No debería tener éxito con una URL inválida")
            case .failure(let error):
                XCTAssertEqual(error as? RepositoryError, RepositoryError.invalidURL)
            }
            expectation.fulfill()
        }
        
        wait(for: [expectation], timeout: 5.0)
    }
}