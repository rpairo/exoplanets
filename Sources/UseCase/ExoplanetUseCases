// Sources/UseCase/ExoplanetUseCases.swift

import Foundation
import Domain

public struct ExoplanetUseCases {
    public enum SizeCategory {
        case small
        case medium
        case large
    }
    
    private let repository: ExoplanetRepository
    
    public init(repository: ExoplanetRepository) {
        self.repository = repository
    }
    
    // 1. Orphan planet counter
    public func countOrphanPlanets(completion: @escaping (Result<Int, Error>) -> Void) {
        repository.fetchExoplanets { result in
            switch result {
            case .success(let exoplanets):
                let count = exoplanets.filter { $0.hostStarMassSlrMass == nil }.count
                completion(.success(count))
            case .failure(let error):
                completion(.failure(error))
            }
        }
    }
    
    // 2. Hottest star planet orbitant
    public func findPlanetOrbitingHottestStar(completion: @escaping (Result<String?, Error>) -> Void) {
        repository.fetchExoplanets { result in
            switch result {
            case .success(let exoplanets):
                let hottestPlanet = exoplanets.max { 
                    ($0.hostStarTempK ?? Int.min) < ($1.hostStarTempK ?? Int.min) 
                }
                completion(.success(hottestPlanet?.planetIdentifier))
            case .failure(let error):
                completion(.failure(error))
            }
        }
    }
    
    // 3. Timeline planets by discovery and size
    public func createDiscoveryTimelineBySize(completion: @escaping (Result<[Int: (small: Int, medium: Int, large: Int)], Error>) -> Void) {
        repository.fetchExoplanets { result in
            switch result {
            case .success(let exoplanets):
                var timeline = [Int: (small: Int, medium: Int, large: Int)]()
                
                for planet in exoplanets {
                    guard let year = planet.discoveryYear, let radius = planet.radiusJpt else { continue }
                    
                    let size: SizeCategory
                    if radius < 1 {
                        size = .small
                    } else if radius < 2 {
                        size = .medium
                    } else {
                        size = .large
                    }
                    
                    if timeline[year] == nil {
                        timeline[year] = (0, 0, 0)
                    }
                    
                    switch size {
                    case .small:
                        timeline[year]!.small += 1
                    case .medium:
                        timeline[year]!.medium += 1
                    case .large:
                        timeline[year]!.large += 1
                    }
                }
                
                completion(.success(timeline))
                
            case .failure(let error):
                completion(.failure(error))
            }
        }
    }
}