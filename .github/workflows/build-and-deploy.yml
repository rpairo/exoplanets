name: Build and Deploy

on:
  push:
    branches:
      - main

permissions:
  contents: read
  packages: write   # Needed if pushing Docker images (or GitHub Packages)

concurrency:
  group: build-and-deploy
  cancel-in-progress: true

jobs:
  # ---------------------------------------------------------------
  # 1) Test Job (Lint + Test with Swift 6.0.3)
  # ---------------------------------------------------------------
  test-code:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      # Retrieve secrets from AWS (e.g., production)
      - name: Retrieve API Secrets from AWS
        id: retrieve-api-secrets
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          api_secrets=$(aws secretsmanager get-secret-value \
            --secret-id exoplanets-analyzer-api-url-prod \
            --query SecretString \
            --output text)

          BASE_URL=$(echo "$api_secrets" | jq -r '.BASE_URL')
          PATH_SEGMENT=$(echo "$api_secrets" | jq -r '.PATH_SEGMENT')
          ENDPOINT_EXOPLANETS=$(echo "$api_secrets" | jq -r '.ENDPOINT_EXOPLANETS')

          echo "::add-mask::$BASE_URL"
          echo "::add-mask::$PATH_SEGMENT"
          echo "::add-mask::$ENDPOINT_EXOPLANETS"

          echo "BASE_URL=$BASE_URL" >> $GITHUB_ENV
          echo "PATH_SEGMENT=$PATH_SEGMENT" >> $GITHUB_ENV
          echo "ENDPOINT_EXOPLANETS=$ENDPOINT_EXOPLANETS" >> $GITHUB_ENV

      # Optional lint step
      - name: Lint code (placeholder for SwiftLint)
        uses: docker://swift:6.0.3
        with:
          # If SwiftLint is not installed in the default image,
          # you'd need to install it:
          #   apt-get update && apt-get install -y swiftlint
          args: swiftlint

      - name: Run Swift Tests
        uses: docker://swift:6.0.3
        env:
          BASE_API_URL: ${{ env.BASE_URL }}
          PATH_SEGMENT: ${{ env.PATH_SEGMENT }}
          ENDPOINT_EXOPLANETS: ${{ env.ENDPOINT_EXOPLANETS }}
        with:
          # Enable coverage if needed: "swift test --enable-code-coverage"
          args: swift test

      - name: Upload test artifacts
        uses: actions/upload-artifact@v3
        with:
          name: test-reports
          path: .build

  # ---------------------------------------------------------------
  # 2) Build-and-Push Job: depends on test-code
  # ---------------------------------------------------------------
  build-scan-and-push:
    name: Build, Scan, and Push Docker Image
    runs-on: ubuntu-latest
    needs: test-code

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Retrieve Docker Hub credentials from AWS
        id: retrieve-docker-secrets
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          docker_secrets=$(aws secretsmanager get-secret-value \
            --secret-id docker-credentials \
            --query SecretString \
            --output text)

          DOCKER_USER=$(echo "$docker_secrets" | jq -r '.USERNAME')
          DOCKER_PASS=$(echo "$docker_secrets" | jq -r '.PASSWORD')

          echo "::add-mask::$DOCKER_USER"
          echo "::add-mask::$DOCKER_PASS"

          echo "DOCKER_USERNAME=$DOCKER_USER" >> $GITHUB_ENV
          echo "DOCKER_PASSWORD=$DOCKER_PASS" >> $GITHUB_ENV

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      # 1) Build the Docker image (no push yet)
      - name: Build Docker Image (no push)
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          tags: rpairo/exoplanet-terminal:latest
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # 2) Scan the image with Docker Scout
      - name: Scan Docker Image for ExoplanetTerminal
        uses: docker/scout-action@v1
        with:
          command: cves
          image: rpairo/exoplanet-terminal:latest
          only-severities: critical,high
          exit-code: true

      # 3) Push the image to Docker Hub if scan passed
      - name: Push Docker Image
        if: success()
        run: docker push rpairo/exoplanet-terminal:latest