name: CI/CD Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - '**'

jobs:
  validate-pr:
    if: github.event_name == 'pull_request'
    name: Validate Pull Request
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Retrieve AWS Secrets
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          echo "Fetching secrets from AWS Secrets Manager..."

          api_secrets=$(aws secretsmanager get-secret-value \
          --secret-id exoplanets-analyzer-api-url-test \
          --query SecretString \
          --output text)

          export BASE_URL=$(echo "$api_secrets" | jq -r .BASE_URL)
          export PATH_SEGMENT=$(echo "$api_secrets" | jq -r .PATH_SEGMENT)
          export ENDPOINT_EXOPLANETS=$(echo "$api_secrets" | jq -r .ENDPOINT_EXOPLANETS)

          echo "BASE_URL=$BASE_URL" >> $GITHUB_ENV
          echo "PATH_SEGMENT=$PATH_SEGMENT" >> $GITHUB_ENV
          echo "ENDPOINT_EXOPLANETS=$ENDPOINT_EXOPLANETS" >> $GITHUB_ENV

      - name: Run Tests with Swift 6.0.3
        uses: docker://swift:6.0.3
        env:
          BASE_API_URL: ${{ env.BASE_URL }}
          PATH_SEGMENT: ${{ env.PATH_SEGMENT }}
          ENDPOINT_EXOPLANETS: ${{ env.ENDPOINT_EXOPLANETS }}
        with:
          args: swift test

  build-scan-and-push:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    name: Build, Scan, and Push Docker Images
    runs-on: ubuntu-latest
    needs: validate-pr

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Retrieve AWS Secrets
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          echo "Fetching secrets from AWS Secrets Manager..."
  
          # Retrieve docker-credentials secret
          docker_secrets=$(aws secretsmanager get-secret-value \
            --secret-id docker-credentials \
            --query SecretString \
            --output text)
  
          export USERNAME=$(echo "$docker_secrets" | jq -r .USERNAME)
          export PASSWORD=$(echo "$docker_secrets" | jq -r .PASSWORD)

          echo "USERNAME=$USERNAME" >> $GITHUB_ENV
          echo "PASSWORD=$PASSWORD" >> $GITHUB_ENV

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.USERNAME }}
          password: ${{ env.PASSWORD }}

      - name: Build Docker Image for ExoplanetTerminal
        run: |
          docker build --target terminal -t rpairo/exoplanet-terminal:latest .

      - name: Scan Docker Image for ExoplanetTerminal with Docker Scout
        uses: docker/scout-action@v1
        with:
          command: cves
          image: rpairo/exoplanet-terminal:latest
          only-severities: critical,high
          exit-code: true

      - name: Push Docker Image for ExoplanetTerminal
        if: success()
        run: |
          docker push rpairo/exoplanet-terminal:latest

      - name: Build Docker Image for ExoplanetAPI
        run: |
          docker build --target api -t rpairo/exoplanet-api:latest .

      - name: Scan Docker Image for ExoplanetAPI with Docker Scout
        uses: docker/scout-action@v1
        with:
          command: cves
          image: rpairo/exoplanet-api:latest
          only-severities: critical,high
          exit-code: true

      - name: Push Docker Image for ExoplanetAPI
        if: success()
        run: |
          docker push rpairo/exoplanet-api:latest